NESTED LOOPS(嵌套循环连接)
	在嵌套循环连接中,oracle从第一个行源中读取第一行,然后和第二个行源中的数据进行对比。
	所有匹配的记录放在结果集中,然后Oracle将读取第一个行源中的下一行。按这种方式直至第一个数据源中的所在行都经过处理。
	第一个记录源通常称为外部表,或者驱动表,相应的第二个行源称为内部表。使用嵌套循环连接是一种从连接结果中提取第一批记录的最快速的方法。

	在驱动行源表(就是您正在查找的记录)较小、或者内部行源表已连接的列有惟一的索引或高度可选的非惟一索引时, 嵌套循环连接效果是比较理想的。
	嵌套循环连接比其他连接方法有优势,它可以快速地从结果集中提取第一批记录,而不用等待整个结果集完全确定下来。
	这样,在理想情况下,终端用户就可以通过查询屏幕查看第一批记录,而在同时读取其他记录。不管如何定义连接的条件或者模式,
	任何两行记录源可以使用嵌套循环连接,所以嵌套循环连接是非常灵活的。
   
	然而,如果内部行源表(读取的第二张表)已连接的列上不包含索引,或者索引不是高度可选时, 嵌套循环连接效率是很低的。
	如果驱动行源表(从驱动表中提取的记录)非常庞大时,其他的连接方法可能更加有效。
HASH JOIN（哈希连接）
     进行哈希关联时，先用特定的哈希行数对左数据集（构建数据数据集）进行哈希分区，创建哈希表，映射哈希值和分区，然后逐条扫描右数据集（探测数据集），
     并用相同的哈希函数求值，然后跟哈希表中的值匹配找到分区，然后再对分区中的数据进行精确匹配。

     当内存能够提供足够的空间时,哈希(HASH)连接是Oracle优化器通常的选择。
     在哈希连接中,Oracle访问一张表(通常是较大的表),并在内存中建立一张基于连接键的哈希表。然后它扫描连接中其他的表（通常是较大的表），
     并根据哈希表检测是否有匹配的记录。

     只有在数据库初始化参数HASH_JOIN_ENABLED设为True,并且为参数PGA_AGGREGATE_TARGET设置了一个足够大的值的时候,
     Oracle才会使用哈希边连接(HASH_AREA_SIZE是向下兼容的参数,但在Oracle9i之前的版本中应当使用HASH_AREA_SIZE)。
     这和嵌套循环连接有点类似――Oracle先建立一张哈希表以利于操作进行。当使用ORDERED提示时,FROM子句中的第一张表将用于建立哈希表。

     当缺少有用的索引时，哈希连接比嵌套循环连接更加有效。哈希连接可能比排序合并连接更快，因为在这种情况下只有一张源表需要排序。
     哈希连接也可能比嵌套循环连接更快，因为处理内存中的哈希表比检索B_树索引更加迅速。和排序合并连接、群集连接一样，哈希连接只能用于等价连接。
     和排序合并连接一样，哈希连接使用内存资源，并且当用于排序内存不足时，会增加临时表空间的I/O（这将使这种连接方法速度变得极慢）。
     最后，只有基于代价的优化器才可以使用哈希连接。

(MERGE JOIN)排列合并连接
	排序合并连接时，从两个数据集的首行开始比较，如果相等，则取两个数据集的下一行进行比较，如果不相等，则取较小值（如降序，则较大值）所在的数据集的
	下一条记录。


   在缺乏数据的选择性或者可用的索引时,或者两个源表都过于庞大(超过记录数的5%)时,排序合并连接将比嵌套循环连更加高效。
   但是,排列合并连接只能用于等价连接(WHERE D.deptno=E.dejptno,而不是WHERE D.deptno>=E.deptno)。
   排列合并连接需要临时的内存块,以用于排序(如果SORT_AREA_SIZE设置得太小的话)。
   这将导致在临时表空间占用更多的内存和磁盘I/O。